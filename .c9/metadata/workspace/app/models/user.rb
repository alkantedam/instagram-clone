{"filter":false,"title":"user.rb","tooltip":"/app/models/user.rb","undoManager":{"mark":0,"position":-1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":49,"column":0},"action":"remove","lines":["class User < ActiveRecord::Base","    has_attached_file :avatar, styles: { medium: \"300x300>\", thumb: \"100x100>\" }, default_url: \"/images/:style/missing.png\"","    validates_attachment_content_type :avatar, content_type: /\\Aimage\\/.*\\z/","  ","    before_create :create_remember_token","    has_secure_password","    has_many :posts","    has_many :relationships, foreign_key: \"follower_id\", dependent: :destroy","    has_many :followeds, through: :relationships","    has_many :reverse_relationships, foreign_key: \"followed_id\", dependent: :destroy, ","            class_name: \"Relationship\"","    has_many :followers, through: :reverse_relationships, source: :follower","    VALID_EMAIL_REGEX = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i","    ","    validates :login, presence: true, uniqueness: true, length: {minimum: 3, maximum: 12}","    validates :email, presence: true, uniqueness: {case_sensitive: false}, format: VALID_EMAIL_REGEX","    validates :password, length: {minimum: 6}","    ","    def User.new_remember_token","        SecureRandom.urlsafe_base64","    end","    def User.encrypt(token)","        Digest::SHA1.hexdigest(token.to_s)","    end","    ","    def follow(user)","        self.relationships.create(followed_id: user)","    end","","    def unfollow(user)","        self.relationships.find_by_followed_id(user).destroy if following?(user)","    end","","    def following?(user)","        self.relationships.find_by_followed_id(user)","    end","","    def feed","        Post.where(user_id: followed_user_ids)","    end","    ","    private","        def create_remember_token","            self.remember_token = User.encrypt(User.new_remember_token)","        end","    ","    before_save {self.email = email.downcase}","","end",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":52,"column":0},"action":"insert","lines":["class User < ApplicationRecord","  before_create :create_remember_token","  has_secure_password","  has_many :posts","  has_many\t:relationships,\tforeign_key:\t\"follower_id\",\tdependent:\t:destroy","  has_many :followed_users, through: :relationships, source: :followed","","  has_many :reverse_relationships, foreign_key: \"followed_id\",","            dependent: :destroy, class_name: \"Relationship\"","  has_many :followers, through: :reverse_relationships","","","","  VALID_EMAIL_REGEX = /\\A([\\w+\\-]\\.?)+@[a-z\\d\\-]+(\\.[a-z]+)*\\.[a-z]+\\z/i","","  validates :login, presence: true, uniqueness: true,","                    length: {minimum: 3, maximum: 12}","  validates :email, presence: true,","                    uniqueness: {case_sensitive: false},","                    format: VALID_EMAIL_REGEX","  validates :password, length: {minimum: 6}","","","  def\tUser.new_remember_token","      SecureRandom.urlsafe_base64","  end","","  def\tUser.encrypt(token)","      Digest::SHA1.hexdigest(token.to_s)","  end","","  def follow(user)","    self.relationships.create(followed_id: user)","  end","","  def unfollow(user)","    self.relationships.find_by_followed_id(user).destroy if following?(user)","  end","","  def following?(user)","      self.relationships.find_by_followed_id(user)","  end","","  def feed","    Post.where(user_id: followed_user_ids)","  end","","  private","  def\tcreate_remember_token","      self.remember_token\t=\tUser.encrypt(User.new_remember_token)","  end","end",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":5,"column":20},"end":{"row":5,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1498196067891,"hash":"3656279dea95093c6c50c7f5b99739b86de3eb0e"}